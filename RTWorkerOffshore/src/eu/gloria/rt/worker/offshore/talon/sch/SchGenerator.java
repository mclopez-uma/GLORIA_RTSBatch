package eu.gloria.rt.worker.offshore.talon.sch;

import java.util.Date;
import java.util.HashMap;
import java.util.List;

import eu.gloria.rt.catalogue.Catalogue;
import eu.gloria.rt.catalogue.ObjCategory;
import eu.gloria.rt.catalogue.ObjInfo;
import eu.gloria.rt.catalogue.Observer;
import eu.gloria.rt.unit.Radec;
import eu.gloria.rt.worker.offshore.acp.rtml.RtmlException;
import eu.gloria.rt.worker.offshore.acp.rtml.RtmlGeneratorContext;
import eu.gloria.rti.sch.core.ObservingPlan;
import eu.gloria.rti.sch.core.plan.instruction.CameraSettings;
import eu.gloria.rti.sch.core.plan.instruction.Expose;
import eu.gloria.rti.sch.core.plan.instruction.Instruction;
import eu.gloria.rti.sch.core.plan.instruction.Loop;
import eu.gloria.rti.sch.core.plan.instruction.Target;
import eu.gloria.tools.conversion.DegreeFormat;
import eu.gloria.tools.time.DateTools;

public class SchGenerator {
	
	public List<String> generateSchList(SchGeneratorContext context) throws SchException{
		
		//TARGETS
		List<Instruction> insts = context.getOp().getInstructions();
		generateTargets(insts, context);
		
		return context.getOutput();
	
	}
	
	
	private void generateTargets(List<Instruction> insts, SchGeneratorContext context) throws SchException{
		
		
		
		if (insts != null){
			for (int x= 0; x < insts.size(); x++){
				Instruction inst = insts.get(x);
				if (inst instanceof Target){
					context.setTarget((Target)inst);
				}else if (inst instanceof CameraSettings){
					context.setCameraSettings((CameraSettings)inst);
				}else if (inst instanceof Expose){
					context.setExpose((Expose) inst);
					generateTargetSch(context);
				}else if (inst instanceof Loop){
					//IGNORE
				}
				
			}
		}
		
	}
	
	private void generateTargetSch(SchGeneratorContext context) throws SchException{
		
		try{
			
			StringBuffer sb = new StringBuffer();
			context.setCurrentOuput(sb);
			
			Date now = new Date();
			Date gmtNow = DateTools.getGMT(now);
			
			
			sb.append("! Generated by mksch Version 1.01").append("\n");
			sb.append("! By Observer ID ").append(context.getOp().getMetadata().getUuid()).append("\n");
			String dateS = DateTools.getDate(DateTools.getGMT(new Date()), "EEE MMM dd HH:mm:ss yyyy"); //Wed Sep 11 09:52:38 2013
			sb.append("! On UTC ").append(dateS).append("\n");
			
			sb.append("\n");
			sb.append("\n");
			
			
			sb.append("TITLE = '").append(getTitle(context.getOp().getMetadata().getDescription())).append("'").append("\n");
			sb.append("OBSERVER = '").append(getUser(context.getOp().getMetadata().getUser())).append("'").append("\n");
			
			sb.append("\n");
			
			if (context.getTarget() != null){
				
				if (context.getTarget().getCoordinates() != null && context.getTarget().getCoordinates().getJ2000()!= null){
					
					double ra = context.getTarget().getCoordinates().getJ2000().getRa();
					double dec = context.getTarget().getCoordinates().getJ2000().getDec();
					
					Radec radec = new Radec(ra, dec);
					
					sb.append("    SOURCE = '").append("").append("'").append("\n"); //EMPTY
					sb.append("    RA = '").append(radec.getRaString(DegreeFormat.HHMMSS)).append("'").append("\n");
					sb.append("    DEC = '").append(radec.getDecString(DegreeFormat.DDMMSS)).append("'").append("\n");
					sb.append("    EPOCH = 2000").append("\n");
					
				} else if (context.getTarget().getObjName() != null){
					
					//Resolve the object data into the catalogue
					Catalogue catalogue = new Catalogue(context.getObserver().getLongitude(), context.getObserver().getLatitude(), context.getObserver().getAltitude());
					ObjInfo objInfo  = catalogue.getObject(context.getTarget().getObjName(), ObjCategory.MajorPlanetAndMoon);
					if (objInfo == null){
						objInfo  = catalogue.getObject(context.getTarget().getObjName(), ObjCategory.OutsideSSystemObj);
						if (objInfo == null){
							objInfo  = catalogue.getObject(context.getTarget().getObjName(), ObjCategory.MinorPlanetOrAsteroid);
							if (objInfo == null) throw new Exception("Unknown Target: " + context.getTarget().getObjName());
						}
					}
					
					if (objInfo.getCategory() == ObjCategory.OutsideSSystemObj){ //By RADEC
						
						sb.append("    SOURCE = '").append(context.getTarget().getObjName()).append("'").append("\n"); //EMPTY
						sb.append("    RA = '").append(objInfo.getPosition().getRaString(DegreeFormat.HHMMSS)).append("'").append("\n");
						sb.append("    DEC = '").append(objInfo.getPosition().getDecString(DegreeFormat.DDMMSS)).append("'").append("\n");
						sb.append("    EPOCH = 2000").append("\n");
						
					}else{ //By name
						
						sb.append("    SOURCE = '").append(translatePlanetName(context.getTarget().getObjName())).append("'").append("\n");
						//sb.append("    RA = '").append("").append("'").append("\n"); //Empty
						//sb.append("    DEC = '").append("").append("'").append("\n"); //Empty
						//sb.append("    EPOCH = 2000").append("\n");
					}
				}
			}
			
			generateFilter(context);
			
			sb.append("    DURATION = '").append(context.getExpose().getExpositionTime()).append("'").append("\n");
			if (context.getCameraSettings() != null && context.getCameraSettings().getBinning() != null){
				sb.append("    BINNING = '").append(context.getCameraSettings().getBinning().getBinX()).append(",").append(context.getCameraSettings().getBinning().getBinY()).append("'").append("\n");
			}
			
			sb.append("    PRIORITY = 100").append("\n");
			sb.append("    COMPRESS = 0").append("\n");
            sb.append("    IMAGEDIR = '").append(context.getTalonImgsPath()).append("'").append("\n");
			sb.append("    COMMENT = '").append("Generated by GLORIA").append("'").append("\n");
			
			int exposeCount = 1;
			if (context.getExpose().getRepeatCount() != null){
				exposeCount = context.getExpose().getRepeatCount().intValue();
			}
			sb.append("    REPEAT = ").append(exposeCount).append("\n");
			sb.append("    /").append("\n");    
			
			
			context.getOutput().add(sb.toString());
			context.setCurrentOuput(null);
			
		}catch(Exception ex){
			throw new SchException(ex);
		}
		
		
	}
	
	private void generateFilter(SchGeneratorContext context) throws RtmlException{
		
		String localFilter = null;
		
		if (context.getExpose().getFilter() != null){
			localFilter = context.getFilterMappingGloria2TALON().get(context.getExpose().getFilter());
		}else{
			localFilter = "Clear"; //By default
		}
		
		if (localFilter != null){
			StringBuffer sb = context.getCurrentOuput();
			sb.append("    FILTER = '").append(localFilter).append("'").append("\n");
		}
		
	}
	
	private String getTitle(String opDesc){
		if (opDesc == null) return "GLORIA";
		opDesc = escape(opDesc);
		if (opDesc.length() > 50){
			opDesc = opDesc.substring(0, 50);
		}
		return opDesc;
		
	}
	
	private String getUser(String user){
		if (user == null) return "GLORIA";
		user = escape(user);
		if (user.length() > 50){
			user = user.substring(0, 50);
		}
		return user;
		
	}
	
	public String escape(String value){
		if (value != null){
			value = value.replaceAll("'", "");
		}
		return value;
	}
	
	private String translatePlanetName(String name){
		
		if (name != null){
			String tmpName = name.toLowerCase().trim();
			if (tmpName.equals("saturn")) return "Saturn";
			if (tmpName.equals("pluto")) return "Pluto";
			if (tmpName.equals("mercury")) return "Mercury";
			if (tmpName.equals("venus")) return "Venus";
			if (tmpName.equals("mars")) return "Mars";
			if (tmpName.equals("jupiter")) return "Jupiter";
			if (tmpName.equals("uranus")) return "Uranus";
			if (tmpName.equals("neptune")) return "Neptune";
			if (tmpName.equals("sun")) return "Sun";
			if (tmpName.equals("moon")) return "Moon";
			
			return name;
		}
		
		return null;
	}
	

	
	
/*	! Generated by mksch Version 1.01
	! By Observer ID 0000000120120900000141027ab03av001
	! On UTC Wed Sep 11 09:52:38 2013


	TITLE = '<Your title here>'
	OBSERVER = 'mclopez'

	    SOURCE = 'prueba'
	    RA = '1'
	    DEC = '1'
	    EPOCH = 2000
	    FILTER = 'C'
	    DURATION = '15'
	    BINNING = '1,1'
	    PRIORITY = 100
	    COMPRESS = 0
	    IMAGEDIR = '/usr/local/telescope/user/images'
	    COMMENT = '<Your comment here>'
	    REPEAT = 2
	    /

	     */

}
